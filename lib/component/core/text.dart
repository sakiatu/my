import 'package:flutter/material.dart';

// an enum to represent the semantic text styles from the theme.
enum _MyTextSemanticStyle {
  displayLarge,
  displayMedium,
  displaySmall,
  headlineLarge,
  headlineMedium,
  headlineSmall,
  titleLarge,
  titleMedium,
  titleSmall,
  bodyLarge,
  bodyMedium, // Often the default
  bodySmall,
  labelLarge,
  labelMedium,
  labelSmall;

  TextStyle style(TextTheme theme) =>
      switch (this) {
        displayLarge => theme.displayLarge,
        displayMedium => theme.displayMedium,
        displaySmall => theme.displaySmall,
        headlineLarge => theme.headlineLarge,
        headlineMedium => theme.headlineMedium,
        headlineSmall => theme.headlineSmall,
        titleLarge => theme.titleLarge,
        titleMedium => theme.titleMedium,
        titleSmall => theme.titleSmall,
        bodyLarge => theme.bodyLarge,
        bodyMedium => theme.bodyMedium,
        bodySmall => theme.bodySmall,
        labelLarge => theme.labelLarge,
        labelMedium => theme.labelMedium,
        labelSmall => theme.labelSmall,
      } ??
      const TextStyle();
}

/// A customized Text widget that wraps [Text] with common styling options
/// and provides named constructors for semantic text styles from the theme.
///
/// Provides convenient parameters for font size, weight, color, alignment, etc.,
/// while allowing for full customization by passing a custom [TextStyle].
/// default [TextOverflow] is [TextOverflow.ellipsis]
@immutable
class MyText extends StatelessWidget {
  /// The text to display.
  final String? data;

  /// The optional semantic text style type from the theme to use as a base.
  final _MyTextSemanticStyle? _semanticStyleType;

  /// The style to use for the text.
  ///
  /// If provided, parameters like [color], [fontSize], [fontWeight], etc.,
  /// will be merged with this style, with the explicit parameters taking precedence.
  final TextStyle? style;

  /// How the text should be aligned horizontally.
  final TextAlign? textAlign;

  /// The directionality of the text.
  final TextDirection? textDirection;

  /// How visual overflow should be handled.
  final TextOverflow? overflow;

  /// Whether the text should break across multiple lines or not.
  final bool? softWrap;

  /// Used to select a font.
  final Locale? locale;

  /// An optional maximum number of lines for the text to span.
  final int? maxLines;

  /// An alternative semantics label for this text.
  final String? semanticsLabel;

  /// Defines how the width of the text and the placement of the soft wrap breaks is determined.
  final TextWidthBasis? textWidthBasis;

  /// Defines how the vertical space around the text should be handled.
  final TextHeightBehavior? textHeightBehavior;

  // Common TextStyle properties exposed directly for convenience
  final Color? color;
  final double? fontSize;
  final FontWeight? fontWeight;
  final FontStyle? fontStyle;
  final double? height;
  final double? letterSpacing;
  final double? wordSpacing;
  final TextBaseline? textBaseline;
  final TextLeadingDistribution? leadingDistribution;
  final Paint? foreground;
  final Paint? background;
  final List<Shadow>? shadows;
  final List<FontFeature>? fontFeatures;
  final TextDecoration? decoration;
  final Color? decorationColor;
  final TextDecorationStyle? decorationStyle;
  final double? decorationThickness;

  /// Private base constructor used by named constructors to pass the semantic style type
  /// and all other parameters as named arguments.
  const MyText._(
    this.data,
    this._semanticStyleType, {
    super.key,
    this.style,
    this.textAlign,
    this.textDirection,
    this.overflow,
    this.softWrap,
    this.locale,
    this.maxLines,
    this.semanticsLabel,
    this.textWidthBasis,
    this.textHeightBehavior,
    this.color,
    this.fontSize,
    this.fontWeight,
    this.fontStyle,
    this.height,
    this.letterSpacing,
    this.wordSpacing,
    this.textBaseline,
    this.leadingDistribution,
    this.foreground,
    this.background,
    this.shadows,
    this.fontFeatures,
    this.decoration,
    this.decorationColor,
    this.decorationStyle,
    this.decorationThickness,
  });

  /// Creates a customized Text widget using the default body text style from the theme.
  /// This is the default constructor.
  factory MyText(
    String? data, {
    Key? key,
    TextStyle? style,
    TextAlign? textAlign,
    TextDirection? textDirection,
    TextOverflow? overflow,
    bool? softWrap,
    Locale? locale,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? color,
    double? fontSize,
    FontWeight? fontWeight,
    FontStyle? fontStyle,
    double? height,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<Shadow>? shadows,
    List<FontFeature>? fontFeatures,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
  }) =>
      MyText._(
        data,
        null,
        key: key,
        style: style,
        textAlign: textAlign,
        textDirection: textDirection,
        overflow: overflow,
        softWrap: softWrap,
        locale: locale,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
        color: color,
        fontSize: fontSize,
        fontWeight: fontWeight,
        fontStyle: fontStyle,
        height: height,
        letterSpacing: letterSpacing,
        wordSpacing: wordSpacing,
        textBaseline: textBaseline,
        leadingDistribution: leadingDistribution,
        foreground: foreground,
        background: background,
        shadows: shadows,
        fontFeatures: fontFeatures,
        decoration: decoration,
        decorationColor: decorationColor,
        decorationStyle: decorationStyle,
        decorationThickness: decorationThickness,
      );

  /// Creates a customized Text widget using the displayLarge style from the theme.
  factory MyText.displayLarge(
    String? data, {
    Key? key,
    TextStyle? style,
    TextAlign? textAlign,
    TextDirection? textDirection,
    TextOverflow? overflow,
    bool? softWrap,
    Locale? locale,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? color,
    double? fontSize,
    FontWeight? fontWeight,
    FontStyle? fontStyle,
    double? height,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<Shadow>? shadows,
    List<FontFeature>? fontFeatures,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
  }) =>
      MyText._(
        data,
        _MyTextSemanticStyle.displayLarge,
        key: key,
        style: style,
        textAlign: textAlign,
        textDirection: textDirection,
        overflow: overflow,
        softWrap: softWrap,
        locale: locale,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
        color: color,
        fontSize: fontSize,
        fontWeight: fontWeight,
        fontStyle: fontStyle,
        height: height,
        letterSpacing: letterSpacing,
        wordSpacing: wordSpacing,
        textBaseline: textBaseline,
        leadingDistribution: leadingDistribution,
        foreground: foreground,
        background: background,
        shadows: shadows,
        fontFeatures: fontFeatures,
        decoration: decoration,
        decorationColor: decorationColor,
        decorationStyle: decorationStyle,
        decorationThickness: decorationThickness,
      );

  /// Creates a customized Text widget using the displayMedium style from the theme.
  factory MyText.displayMedium(
    String? data, {
    Key? key,
    TextStyle? style,
    TextAlign? textAlign,
    TextDirection? textDirection,
    TextOverflow? overflow,
    bool? softWrap,
    Locale? locale,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? color,
    double? fontSize,
    FontWeight? fontWeight,
    FontStyle? fontStyle,
    double? height,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<Shadow>? shadows,
    List<FontFeature>? fontFeatures,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
  }) =>
      MyText._(
        data,
        _MyTextSemanticStyle.displayMedium,
        key: key,
        style: style,
        textAlign: textAlign,
        textDirection: textDirection,
        overflow: overflow,
        softWrap: softWrap,
        locale: locale,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
        color: color,
        fontSize: fontSize,
        fontWeight: fontWeight,
        fontStyle: fontStyle,
        height: height,
        letterSpacing: letterSpacing,
        wordSpacing: wordSpacing,
        textBaseline: textBaseline,
        leadingDistribution: leadingDistribution,
        foreground: foreground,
        background: background,
        shadows: shadows,
        fontFeatures: fontFeatures,
        decoration: decoration,
        decorationColor: decorationColor,
        decorationStyle: decorationStyle,
        decorationThickness: decorationThickness,
      );

  /// Creates a customized Text widget using the displaySmall style from the theme.
  factory MyText.displaySmall(
    String? data, {
    Key? key,
    TextStyle? style,
    TextAlign? textAlign,
    TextDirection? textDirection,
    TextOverflow? overflow,
    bool? softWrap,
    Locale? locale,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? color,
    double? fontSize,
    FontWeight? fontWeight,
    FontStyle? fontStyle,
    double? height,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<Shadow>? shadows,
    List<FontFeature>? fontFeatures,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
  }) =>
      MyText._(
        data,
        _MyTextSemanticStyle.displaySmall,
        key: key,
        style: style,
        textAlign: textAlign,
        textDirection: textDirection,
        overflow: overflow,
        softWrap: softWrap,
        locale: locale,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
        color: color,
        fontSize: fontSize,
        fontWeight: fontWeight,
        fontStyle: fontStyle,
        height: height,
        letterSpacing: letterSpacing,
        wordSpacing: wordSpacing,
        textBaseline: textBaseline,
        leadingDistribution: leadingDistribution,
        foreground: foreground,
        background: background,
        shadows: shadows,
        fontFeatures: fontFeatures,
        decoration: decoration,
        decorationColor: decorationColor,
        decorationStyle: decorationStyle,
        decorationThickness: decorationThickness,
      );

  /// Creates a customized Text widget using the headlineLarge style from the theme.
  factory MyText.headlineLarge(
    String? data, {
    Key? key,
    TextStyle? style,
    TextAlign? textAlign,
    TextDirection? textDirection,
    TextOverflow? overflow,
    bool? softWrap,
    Locale? locale,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? color,
    double? fontSize,
    FontWeight? fontWeight,
    FontStyle? fontStyle,
    double? height,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<Shadow>? shadows,
    List<FontFeature>? fontFeatures,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
  }) =>
      MyText._(
        data,
        _MyTextSemanticStyle.headlineLarge,
        key: key,
        style: style,
        textAlign: textAlign,
        textDirection: textDirection,
        overflow: overflow,
        softWrap: softWrap,
        locale: locale,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
        color: color,
        fontSize: fontSize,
        fontWeight: fontWeight,
        fontStyle: fontStyle,
        height: height,
        letterSpacing: letterSpacing,
        wordSpacing: wordSpacing,
        textBaseline: textBaseline,
        leadingDistribution: leadingDistribution,
        foreground: foreground,
        background: background,
        shadows: shadows,
        fontFeatures: fontFeatures,
        decoration: decoration,
        decorationColor: decorationColor,
        decorationStyle: decorationStyle,
        decorationThickness: decorationThickness,
      );

  /// Creates a customized Text widget using the headlineMedium style from the theme.
  factory MyText.headlineMedium(
    String? data, {
    Key? key,
    TextStyle? style,
    TextAlign? textAlign,
    TextDirection? textDirection,
    TextOverflow? overflow,
    bool? softWrap,
    Locale? locale,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? color,
    double? fontSize,
    FontWeight? fontWeight,
    FontStyle? fontStyle,
    double? height,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<Shadow>? shadows,
    List<FontFeature>? fontFeatures,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
  }) =>
      MyText._(
        data,
        _MyTextSemanticStyle.headlineMedium,
        key: key,
        style: style,
        textAlign: textAlign,
        textDirection: textDirection,
        overflow: overflow,
        softWrap: softWrap,
        locale: locale,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
        color: color,
        fontSize: fontSize,
        fontWeight: fontWeight,
        fontStyle: fontStyle,
        height: height,
        letterSpacing: letterSpacing,
        wordSpacing: wordSpacing,
        textBaseline: textBaseline,
        leadingDistribution: leadingDistribution,
        foreground: foreground,
        background: background,
        shadows: shadows,
        fontFeatures: fontFeatures,
        decoration: decoration,
        decorationColor: decorationColor,
        decorationStyle: decorationStyle,
        decorationThickness: decorationThickness,
      );

  /// Creates a customized Text widget using the headlineSmall style from the theme.
  factory MyText.headlineSmall(
    String? data, {
    Key? key,
    TextStyle? style,
    TextAlign? textAlign,
    TextDirection? textDirection,
    TextOverflow? overflow,
    bool? softWrap,
    Locale? locale,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? color,
    double? fontSize,
    FontWeight? fontWeight,
    FontStyle? fontStyle,
    double? height,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<Shadow>? shadows,
    List<FontFeature>? fontFeatures,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
  }) =>
      MyText._(
        data,
        _MyTextSemanticStyle.headlineSmall,
        key: key,
        style: style,
        textAlign: textAlign,
        textDirection: textDirection,
        overflow: overflow,
        softWrap: softWrap,
        locale: locale,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
        color: color,
        fontSize: fontSize,
        fontWeight: fontWeight,
        fontStyle: fontStyle,
        height: height,
        letterSpacing: letterSpacing,
        wordSpacing: wordSpacing,
        textBaseline: textBaseline,
        leadingDistribution: leadingDistribution,
        foreground: foreground,
        background: background,
        shadows: shadows,
        fontFeatures: fontFeatures,
        decoration: decoration,
        decorationColor: decorationColor,
        decorationStyle: decorationStyle,
        decorationThickness: decorationThickness,
      );

  /// Creates a customized Text widget using the titleLarge style from the theme.
  factory MyText.titleLarge(
    String? data, {
    Key? key,
    TextStyle? style,
    TextAlign? textAlign,
    TextDirection? textDirection,
    TextOverflow? overflow,
    bool? softWrap,
    Locale? locale,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? color,
    double? fontSize,
    FontWeight? fontWeight,
    FontStyle? fontStyle,
    double? height,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<Shadow>? shadows,
    List<FontFeature>? fontFeatures,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
  }) =>
      MyText._(
        data,
        _MyTextSemanticStyle.titleLarge,
        key: key,
        style: style,
        textAlign: textAlign,
        textDirection: textDirection,
        overflow: overflow,
        softWrap: softWrap,
        locale: locale,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
        color: color,
        fontSize: fontSize,
        fontWeight: fontWeight,
        fontStyle: fontStyle,
        height: height,
        letterSpacing: letterSpacing,
        wordSpacing: wordSpacing,
        textBaseline: textBaseline,
        leadingDistribution: leadingDistribution,
        foreground: foreground,
        background: background,
        shadows: shadows,
        fontFeatures: fontFeatures,
        decoration: decoration,
        decorationColor: decorationColor,
        decorationStyle: decorationStyle,
        decorationThickness: decorationThickness,
      );

  /// Creates a customized Text widget using the titleMedium style from the theme.
  factory MyText.titleMedium(
    String? data, {
    Key? key,
    TextStyle? style,
    TextAlign? textAlign,
    TextDirection? textDirection,
    TextOverflow? overflow,
    bool? softWrap,
    Locale? locale,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? color,
    double? fontSize,
    FontWeight? fontWeight,
    FontStyle? fontStyle,
    double? height,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<Shadow>? shadows,
    List<FontFeature>? fontFeatures,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
  }) =>
      MyText._(
        data,
        _MyTextSemanticStyle.titleMedium,
        key: key,
        style: style,
        textAlign: textAlign,
        textDirection: textDirection,
        overflow: overflow,
        softWrap: softWrap,
        locale: locale,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
        color: color,
        fontSize: fontSize,
        fontWeight: fontWeight,
        fontStyle: fontStyle,
        height: height,
        letterSpacing: letterSpacing,
        wordSpacing: wordSpacing,
        textBaseline: textBaseline,
        leadingDistribution: leadingDistribution,
        foreground: foreground,
        background: background,
        shadows: shadows,
        fontFeatures: fontFeatures,
        decoration: decoration,
        decorationColor: decorationColor,
        decorationStyle: decorationStyle,
        decorationThickness: decorationThickness,
      );

  /// Creates a customized Text widget using the titleSmall style from the theme.
  factory MyText.titleSmall(
    String? data, {
    Key? key,
    TextStyle? style,
    TextAlign? textAlign,
    TextDirection? textDirection,
    TextOverflow? overflow,
    bool? softWrap,
    Locale? locale,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? color,
    double? fontSize,
    FontWeight? fontWeight,
    FontStyle? fontStyle,
    double? height,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<Shadow>? shadows,
    List<FontFeature>? fontFeatures,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
  }) =>
      MyText._(
        data,
        _MyTextSemanticStyle.titleSmall,
        key: key,
        style: style,
        textAlign: textAlign,
        textDirection: textDirection,
        overflow: overflow,
        softWrap: softWrap,
        locale: locale,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
        color: color,
        fontSize: fontSize,
        fontWeight: fontWeight,
        fontStyle: fontStyle,
        height: height,
        letterSpacing: letterSpacing,
        wordSpacing: wordSpacing,
        textBaseline: textBaseline,
        leadingDistribution: leadingDistribution,
        foreground: foreground,
        background: background,
        shadows: shadows,
        fontFeatures: fontFeatures,
        decoration: decoration,
        decorationColor: decorationColor,
        decorationStyle: decorationStyle,
        decorationThickness: decorationThickness,
      );

  /// Creates a customized Text widget using the bodyLarge style from the theme.
  factory MyText.bodyLarge(
    String? data, {
    Key? key,
    TextStyle? style,
    TextAlign? textAlign,
    TextDirection? textDirection,
    TextOverflow? overflow,
    bool? softWrap,
    Locale? locale,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? color,
    double? fontSize,
    FontWeight? fontWeight,
    FontStyle? fontStyle,
    double? height,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<Shadow>? shadows,
    List<FontFeature>? fontFeatures,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
  }) =>
      MyText._(
        data,
        _MyTextSemanticStyle.bodyLarge,
        key: key,
        style: style,
        textAlign: textAlign,
        textDirection: textDirection,
        overflow: overflow,
        softWrap: softWrap,
        locale: locale,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
        color: color,
        fontSize: fontSize,
        fontWeight: fontWeight,
        fontStyle: fontStyle,
        height: height,
        letterSpacing: letterSpacing,
        wordSpacing: wordSpacing,
        textBaseline: textBaseline,
        leadingDistribution: leadingDistribution,
        foreground: foreground,
        background: background,
        shadows: shadows,
        fontFeatures: fontFeatures,
        decoration: decoration,
        decorationColor: decorationColor,
        decorationStyle: decorationStyle,
        decorationThickness: decorationThickness,
      );

  /// Creates a customized Text widget using the bodyMedium style from the theme.
  factory MyText.bodyMedium(
    String? data, {
    Key? key,
    TextStyle? style,
    TextAlign? textAlign,
    TextDirection? textDirection,
    TextOverflow? overflow,
    bool? softWrap,
    Locale? locale,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? color,
    double? fontSize,
    FontWeight? fontWeight,
    FontStyle? fontStyle,
    double? height,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<Shadow>? shadows,
    List<FontFeature>? fontFeatures,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
  }) =>
      MyText._(
        data,
        _MyTextSemanticStyle.bodyMedium,
        key: key,
        style: style,
        textAlign: textAlign,
        textDirection: textDirection,
        overflow: overflow,
        softWrap: softWrap,
        locale: locale,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
        color: color,
        fontSize: fontSize,
        fontWeight: fontWeight,
        fontStyle: fontStyle,
        height: height,
        letterSpacing: letterSpacing,
        wordSpacing: wordSpacing,
        textBaseline: textBaseline,
        leadingDistribution: leadingDistribution,
        foreground: foreground,
        background: background,
        shadows: shadows,
        fontFeatures: fontFeatures,
        decoration: decoration,
        decorationColor: decorationColor,
        decorationStyle: decorationStyle,
        decorationThickness: decorationThickness,
      );

  /// Creates a customized Text widget using the bodySmall style from the theme.
  factory MyText.bodySmall(
    String? data, {
    Key? key,
    TextStyle? style,
    TextAlign? textAlign,
    TextDirection? textDirection,
    TextOverflow? overflow,
    bool? softWrap,
    Locale? locale,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? color,
    double? fontSize,
    FontWeight? fontWeight,
    FontStyle? fontStyle,
    double? height,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<Shadow>? shadows,
    List<FontFeature>? fontFeatures,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
  }) =>
      MyText._(
        data,
        _MyTextSemanticStyle.bodySmall,
        key: key,
        style: style,
        textAlign: textAlign,
        textDirection: textDirection,
        overflow: overflow,
        softWrap: softWrap,
        locale: locale,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
        color: color,
        fontSize: fontSize,
        fontWeight: fontWeight,
        fontStyle: fontStyle,
        height: height,
        letterSpacing: letterSpacing,
        wordSpacing: wordSpacing,
        textBaseline: textBaseline,
        leadingDistribution: leadingDistribution,
        foreground: foreground,
        background: background,
        shadows: shadows,
        fontFeatures: fontFeatures,
        decoration: decoration,
        decorationColor: decorationColor,
        decorationStyle: decorationStyle,
        decorationThickness: decorationThickness,
      );

  /// Creates a customized Text widget using the labelLarge style from the theme.
  factory MyText.labelLarge(
    String? data, {
    Key? key,
    TextStyle? style,
    TextAlign? textAlign,
    TextDirection? textDirection,
    TextOverflow? overflow,
    bool? softWrap,
    Locale? locale,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? color,
    double? fontSize,
    FontWeight? fontWeight,
    FontStyle? fontStyle,
    double? height,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<Shadow>? shadows,
    List<FontFeature>? fontFeatures,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
  }) =>
      MyText._(
        data,
        _MyTextSemanticStyle.labelLarge,
        key: key,
        style: style,
        textAlign: textAlign,
        textDirection: textDirection,
        overflow: overflow,
        softWrap: softWrap,
        locale: locale,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
        color: color,
        fontSize: fontSize,
        fontWeight: fontWeight,
        fontStyle: fontStyle,
        height: height,
        letterSpacing: letterSpacing,
        wordSpacing: wordSpacing,
        textBaseline: textBaseline,
        leadingDistribution: leadingDistribution,
        foreground: foreground,
        background: background,
        shadows: shadows,
        fontFeatures: fontFeatures,
        decoration: decoration,
        decorationColor: decorationColor,
        decorationStyle: decorationStyle,
        decorationThickness: decorationThickness,
      );

  /// Creates a customized Text widget using the labelMedium style from the theme.
  factory MyText.labelMedium(
    String? data, {
    Key? key,
    TextStyle? style,
    TextAlign? textAlign,
    TextDirection? textDirection,
    TextOverflow? overflow,
    bool? softWrap,
    Locale? locale,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? color,
    double? fontSize,
    FontWeight? fontWeight,
    FontStyle? fontStyle,
    double? height,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<Shadow>? shadows,
    List<FontFeature>? fontFeatures,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
  }) =>
      MyText._(
        data,
        _MyTextSemanticStyle.labelMedium,
        key: key,
        style: style,
        textAlign: textAlign,
        textDirection: textDirection,
        overflow: overflow,
        softWrap: softWrap,
        locale: locale,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
        color: color,
        fontSize: fontSize,
        fontWeight: fontWeight,
        fontStyle: fontStyle,
        height: height,
        letterSpacing: letterSpacing,
        wordSpacing: wordSpacing,
        textBaseline: textBaseline,
        leadingDistribution: leadingDistribution,
        foreground: foreground,
        background: background,
        shadows: shadows,
        fontFeatures: fontFeatures,
        decoration: decoration,
        decorationColor: decorationColor,
        decorationStyle: decorationStyle,
        decorationThickness: decorationThickness,
      );

  /// Creates a customized Text widget using the labelSmall style from the theme.
  factory MyText.labelSmall(
    String? data, {
    Key? key,
    TextStyle? style,
    TextAlign? textAlign,
    TextDirection? textDirection,
    TextOverflow? overflow,
    bool? softWrap,
    Locale? locale,
    int? maxLines,
    String? semanticsLabel,
    TextWidthBasis? textWidthBasis,
    TextHeightBehavior? textHeightBehavior,
    Color? color,
    double? fontSize,
    FontWeight? fontWeight,
    FontStyle? fontStyle,
    double? height,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    TextLeadingDistribution? leadingDistribution,
    Paint? foreground,
    Paint? background,
    List<Shadow>? shadows,
    List<FontFeature>? fontFeatures,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
  }) =>
      MyText._(
        data,
        _MyTextSemanticStyle.labelSmall,
        key: key,
        style: style,
        textAlign: textAlign,
        textDirection: textDirection,
        overflow: overflow,
        softWrap: softWrap,
        locale: locale,
        maxLines: maxLines,
        semanticsLabel: semanticsLabel,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
        color: color,
        fontSize: fontSize,
        fontWeight: fontWeight,
        fontStyle: fontStyle,
        height: height,
        letterSpacing: letterSpacing,
        wordSpacing: wordSpacing,
        textBaseline: textBaseline,
        leadingDistribution: leadingDistribution,
        foreground: foreground,
        background: background,
        shadows: shadows,
        fontFeatures: fontFeatures,
        decoration: decoration,
        decorationColor: decorationColor,
        decorationStyle: decorationStyle,
        decorationThickness: decorationThickness,
      );

  @override
  Widget build(BuildContext context) {
    final textTheme = Theme.of(context).textTheme;

    // Determine the base style from the theme based on the semantic style type.
    final baseStyle = _semanticStyleType?.style(textTheme).merge(style) ?? const TextStyle();

    // Apply individual styling parameters, overriding the merged style
    final effectiveStyle = baseStyle.copyWith(
      color: color,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      height: height,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      leadingDistribution: leadingDistribution,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
    );

    return Text(
      '$data',
      key: key,
      style: effectiveStyle,
      textAlign: textAlign,
      textDirection: textDirection,
      overflow: overflow ?? TextOverflow.ellipsis,
      softWrap: softWrap,
      locale: locale,
      maxLines: maxLines,
      semanticsLabel: semanticsLabel,
      textWidthBasis: textWidthBasis,
      textHeightBehavior: textHeightBehavior,
    );
  }
}
